/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddChannelMemberRequest,
  Channel,
  CreateChannelRequest,
  CreateDMRequest,
  User,
  UserDTO,
} from '../models/index';
import {
    AddChannelMemberRequestFromJSON,
    AddChannelMemberRequestToJSON,
    ChannelFromJSON,
    ChannelToJSON,
    CreateChannelRequestFromJSON,
    CreateChannelRequestToJSON,
    CreateDMRequestFromJSON,
    CreateDMRequestToJSON,
    UserFromJSON,
    UserToJSON,
    UserDTOFromJSON,
    UserDTOToJSON,
} from '../models/index';

export interface AddMemberRequest {
    channelId: number;
    user: User;
    addChannelMemberRequest: AddChannelMemberRequest;
}

export interface CreateChannelOperationRequest {
    user: User;
    createChannelRequest: CreateChannelRequest;
}

export interface CreateDirectMessageChannelRequest {
    user: User;
    createDMRequest: CreateDMRequest;
}

export interface GetChannelRequest {
    channelId: number;
    user: User;
}

export interface GetChannelsForUserRequest {
    user: User;
}

export interface ListMembersRequest {
    channelId: number;
    user: User;
}

export interface RemoveMemberRequest {
    channelId: number;
    userId: number;
    user: User;
}

/**
 * 
 */
export class ChannelControllerApi extends runtime.BaseAPI {

    /**
     */
    async addMemberRaw(requestParameters: AddMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling addMember().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling addMember().'
            );
        }

        if (requestParameters['addChannelMemberRequest'] == null) {
            throw new runtime.RequiredError(
                'addChannelMemberRequest',
                'Required parameter "addChannelMemberRequest" was null or undefined when calling addMember().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/channels/{channelId}/members`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddChannelMemberRequestToJSON(requestParameters['addChannelMemberRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addMember(requestParameters: AddMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addMemberRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createChannelRaw(requestParameters: CreateChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling createChannel().'
            );
        }

        if (requestParameters['createChannelRequest'] == null) {
            throw new runtime.RequiredError(
                'createChannelRequest',
                'Required parameter "createChannelRequest" was null or undefined when calling createChannel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/channels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChannelRequestToJSON(requestParameters['createChannelRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFromJSON(jsonValue));
    }

    /**
     */
    async createChannel(requestParameters: CreateChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel> {
        const response = await this.createChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createDirectMessageChannelRaw(requestParameters: CreateDirectMessageChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling createDirectMessageChannel().'
            );
        }

        if (requestParameters['createDMRequest'] == null) {
            throw new runtime.RequiredError(
                'createDMRequest',
                'Required parameter "createDMRequest" was null or undefined when calling createDirectMessageChannel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/channels/dm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDMRequestToJSON(requestParameters['createDMRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFromJSON(jsonValue));
    }

    /**
     */
    async createDirectMessageChannel(requestParameters: CreateDirectMessageChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel> {
        const response = await this.createDirectMessageChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getChannelRaw(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling getChannel().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling getChannel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/channels/{channelId}`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFromJSON(jsonValue));
    }

    /**
     */
    async getChannel(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel> {
        const response = await this.getChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getChannelsForUserRaw(requestParameters: GetChannelsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Channel>>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling getChannelsForUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/channels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChannelFromJSON));
    }

    /**
     */
    async getChannelsForUser(requestParameters: GetChannelsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Channel>> {
        const response = await this.getChannelsForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listMembersRaw(requestParameters: ListMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserDTO>>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling listMembers().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling listMembers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/channels/{channelId}/members`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDTOFromJSON));
    }

    /**
     */
    async listMembers(requestParameters: ListMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserDTO>> {
        const response = await this.listMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeMemberRaw(requestParameters: RemoveMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling removeMember().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeMember().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling removeMember().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/channels/{channelId}/members/{userId}`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters['channelId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeMember(requestParameters: RemoveMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeMemberRaw(requestParameters, initOverrides);
    }

}
